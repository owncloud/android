name: Update Test

on:
  workflow_dispatch:
  push:
    branches:
    - feature/*
    - fix/*
    - improvement/*
    - release/*
    - technical/*
    - 'dependabot/**'

permissions:
  # Only need read access to repository contents
  contents: read
  actions: read

jobs:
  build_and_test:
    # Job to build APKs for the latest commit and the commit that triggered the workflow
    name: Build and Test
    runs-on: ubuntu-latest
   
    env:
      BUILD_TOOLS_VERSION: "34.0.0"
      GITHUB_SHA: ${{ github.sha }}

    steps:
      # Checkout the specific commit
      - name: Checkout specific commit
        uses: actions/checkout@v5
        with:
          ref: ${{ github.sha }}

      # Set up Java JDK required for Gradle
      - name: Set up JDK
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: '17'

      # Set up Android SDK and build tools
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      # Cache Gradle dependencies to speed up builds
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Build the APK
      - name: Build APK
        run: ./gradlew assembleqaRelease --no-daemon --stacktrace --info

      # Copy the built APK to a commit-specific name
      - name: Get apk
        run: cp owncloudApp/build/outputs/apk/qa/release/owncloud_*-qa-release*.apk owncloud-${{ github.sha }}.apk

      # Decode keystore from secret for signing
      - name: Restore keystore
        run: |
          echo "${{ secrets.TEST_KS_B64 }}" | base64 -d > ./test.keystore

      # Align and sign the APK
      - name: Sign APK
        shell: bash
        env:
          KEY_ALIAS: ${{ secrets.TEST_KS_ALIAS }}
          KEY_PASSWORD: ${{ secrets.TEST_KS_KEY }}
        run: |
          APK_INPUT="owncloud-${{ github.sha }}.apk"
          APK_ALIGNED="owncloud-${{ github.sha }}-aligned.apk"
          APK_SIGNED="owncloudSigned-${{ github.sha }}.apk"
          KEYSTORE="./test.keystore"

          # Align APK for optimal performance
          echo "Aligning APK..."
          $ANDROID_SDK_ROOT/build-tools/${{ env.BUILD_TOOLS_VERSION }}/zipalign -v -p 4 "$APK_INPUT" "$APK_ALIGNED"

          # Sign APK using keystore
          echo "Signing APK..."
          $ANDROID_SDK_ROOT/build-tools/${{ env.BUILD_TOOLS_VERSION }}/apksigner sign \
            --ks "$KEYSTORE" \
            --ks-pass pass:"$KEY_PASSWORD" \
            --key-pass pass:"$KEY_PASSWORD" \
            --ks-key-alias "$KEY_ALIAS" \
            --out "$APK_SIGNED" \
            "$APK_ALIGNED"

          echo "Signed APK: $APK_SIGNED"

          # Clean up temporary files
          rm -f "$APK_ALIGNED"
          rm -f ./test.keystore

      # Upload the signed APK as an artifact
      - name: Upload APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: owncloudSigned-${{ github.sha }}
          path: ./owncloudSigned-${{ github.sha }}.apk
          retention-days: 1

      # Clean up the workspace
      - name: Clean up
        run: |
          rm -rf ${{ github.workspace }}/*
          rm -rf ${{ github.workspace }}/.[!.]*
          rm -rf ${{ github.workspace }}/..?*

      # Clone repository containing update tests
      - name: Clone tests repo
        run: git clone https://github.com/owncloud/android-update-testing.git .

      # Download APK built last latest signing
      - name: Download latest signed APK
        uses: dawidd6/action-download-artifact@v11
        with:
          workflow: build-apk-from-latest.yml
          name: owncloudSigned-latest
          workflow_conclusion: success
          path: ./src/test/resources

      # Download APK built from current commit
      - name: Get apk built from current
        uses: actions/download-artifact@v6
        with:
          name: owncloudSigned-${{ github.sha }}
          path: ./src/test/resources

      # Rename APKs to standard names expected by tests
      - name: Rename artifacts
        run: |
          ls -al ./src/test/resources
          mv ./src/test/resources/owncloudSigned-latest.apk ./src/test/resources/owncloudSigned1.apk
          mv ./src/test/resources/owncloudSigned-${{ github.sha }}.apk ./src/test/resources/owncloudSigned2.apk
          ls -al ./src/test/resources

      # Start Appium server
      - name: Start Appium
        run: |
          mkdir -p logs video
          chmod +x ./runAppium.sh
          ./runAppium.sh

      # Enable KVM for emulator acceleration
      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      # Run tests over emulator and catch crash logs
      - name: Run Emulator & Execute tests
        uses: reactivecircus/android-emulator-runner@v2
        id: execution
        with:
          api-level: 31
          target: google_apis
          arch: x86_64
          profile: pixel_5
          avd-name: test-avd
          force-avd-creation: true
          disable-animations: true
          emulator-options: -no-snapshot -no-window -no-audio -no-boot-anim -accel on -memory 4096
          script: |
            # To catch only crashes in background
            adb logcat -b crash *:E > crash_log.txt 2>&1 &
            LOGCAT_PID=$!

            ./gradlew --no-daemon clean test -Dserver="${{ secrets.OC_SERVER_URL }}" -Dusername="${{ secrets.OC_SERVER_USERNAME_TEST }}" -Dpassword="${{ secrets.OC_SERVER_PASSWORD_TEST }}" -Dcommit="$(echo $GITHUB_SHA | cut -c1-7)"

            # Kill logcat to serve crash_log.txt
            kill $LOGCAT_PID || true

      # If crash happened, upload crash log
      - name: Upload crash log artifact
        if: always() && hashFiles('crash_log.txt') != ''
        uses: actions/upload-artifact@v4
        with:
          name: crash-log
          path: crash_log.txt

      # Prepare crash log file to be uploaded
      - name: Rename log file
        if: always()
        run: |
          cp logs/*.log logs/log.log || true

      # Upload log file
      - name: Upload Execution Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: ./logs/log.log

      # Upload appium log
      - name: Upload Appium Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: appium
          path: ./appium.log

      # Prepare video file to be uploaded by compressing it
      - name: Zip video files
        if: always()
        run: zip -r -9 test-recording.zip video || true

      # Upload video file
      - name: Upload Video
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: video-recording
          path: ./test-recording.zip
