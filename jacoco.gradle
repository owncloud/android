// jacoco.gradle - Jacoco configuration compatible with Android Library and JVM modules
apply plugin: 'jacoco'

ext {
    // Common exclusions: generated and irrelevant classes for code coverage
    commonFileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*'
    ]
}

/**
 * Sets up Jacoco report and coverage verification tasks for Android Library or JVM modules.
 *
 * @param extraClassExcludes Optional list of additional class exclusion patterns.
 */
def setupJacocoTasks(extraClassExcludes = []) {
    def fileFilter = commonFileFilter + extraClassExcludes

    // Source directories for Java and Kotlin code
    def javaSrc = "$projectDir/src/main/java"
    def kotlinSrc = "$projectDir/src/main/kotlin"

    // Directory containing compiled classes to analyze (debug variant)
    def classesDir = fileTree(
            dir: layout.buildDirectory.dir("tmp/kotlin-classes/debug").get().asFile,
            excludes: fileFilter
    )

    // Execution data files generated by unit and/or instrumentation tests
    def executionDataFiles = fileTree(
            dir: layout.buildDirectory.get().asFile,
            includes: [
                    'jacoco/testDebugUnitTest.exec',
                    'outputs/code_coverage/debugAndroidTest/connected/*.ec'
            ]
    )

    // Try to find the appropriate test task: Android or JVM
    def testTask = tasks.findByName('testDebugUnitTest') ?: tasks.findByName('test')

    // If no test task exists, skip Jacoco setup for this module
    if (testTask == null) {
        logger.warn("No test task found for coverage in project ${project.name}. Skipping Jacoco setup.")
        return
    }

    // For Android modules: enable Jacoco on unit tests
    if (project.plugins.hasPlugin('com.android.library') || project.plugins.hasPlugin('com.android.application')) {
        android.testOptions.unitTests.all {
            jacoco.includeNoLocationClasses = true
            jacoco.excludes = ['jdk.internal.*']
        }
    } else {
        // For JVM modules: configure all Test tasks
        tasks.withType(Test).configureEach {
            jacoco.includeNoLocationClasses = true
            jacoco.excludes = ['jdk.internal.*']
        }
    }

    // Register Jacoco report generation task
    tasks.register('jacocoTestReport', JacocoReport) {
        dependsOn testTask

        group = 'Verification'
        description = 'Generates Jacoco code coverage reports in HTML and XML formats.'

        reports {
            xml.required.set(true)
            html.required.set(true)
        }

        sourceDirectories.setFrom(files(javaSrc, kotlinSrc))
        classDirectories.setFrom(classesDir)
        executionData.setFrom(executionDataFiles)
    }

    // Register Jacoco verification task with thresholds
    tasks.register('jacocoTestCoverageVerification', JacocoCoverageVerification) {
        dependsOn testTask

        group = 'Verification'
        description = 'Verifies that code coverage meets specified thresholds.'

        sourceDirectories.setFrom(files(javaSrc, kotlinSrc))
        classDirectories.setFrom(classesDir)
        executionData.setFrom(executionDataFiles)

        violationRules {
            rule {
                enabled = true
                limit {
                    counter = 'INSTRUCTION'
                    value = 'COVEREDRATIO'
                    minimum = 0.80
                }
                limit {
                    counter = 'BRANCH'
                    value = 'COVEREDRATIO'
                    minimum = 0.50
                }
                limit {
                    counter = 'CLASS'
                    value = 'COVEREDRATIO'
                    minimum = 0.90
                }
            }
        }
    }

    // Configure task dependencies
    tasks.named('jacocoTestReport').configure { mustRunAfter testTask }
    tasks.named('jacocoTestCoverageVerification').configure { mustRunAfter 'jacocoTestReport' }
    tasks.register('coverageCheckAndReport') { dependsOn testTask, 'jacocoTestReport', 'jacocoTestCoverageVerification' }
}

// Export the setup function to be used from module build.gradle files
ext.setupJacocoTasks = this.&setupJacocoTasks
